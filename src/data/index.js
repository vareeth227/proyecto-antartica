/**
 * ===================================================
 * DATA LAYER INDEX - PUNTO DE ENTRADA CENTRALIZADO
 * ===================================================
 * 
 * Archivo central para todas las operaciones de base de datos.
 * Exporta todos los modelos y utilidades de la capa de datos.
 * 
 * CARACTER√çSTICAS:
 * - Inicializaci√≥n autom√°tica de la base de datos
 * - Exportaci√≥n centralizada de todos los modelos
 * - Utilidades para gesti√≥n de conexiones
 * - Configuraci√≥n de entorno automatizada
 * 
 * AUTOR: Sistema Ant√°rtica
 * FECHA: Octubre 2025
 * ===================================================
 */

// ===================================================
// IMPORTACIONES DE MODELOS Y UTILIDADES
// ===================================================

// Gestor principal de base de datos
import {
  dbManager,
  getDatabase,
  initializeDatabase,
  closeDatabase,
  getDatabaseConfig,
  DB_CONFIG
} from './database.js';

// Modelos de datos
import { UserModel, userModel, getUserModel } from './userModel.js';
import { ProductModel, productModel, getProductModel } from './productModel.js';
import { OrderModel, orderModel, getOrderModel, ORDER_STATES, PAYMENT_METHODS, ORDER_CONFIG } from './orderModel.js';

// Esquemas de base de datos
import {
  USER_SCHEMA,
  PRODUCT_SCHEMA,
  ORDER_SCHEMA,
  ORDER_DETAIL_SCHEMA,
  SESSION_SCHEMA
} from './database.js';

// ===================================================
// CONFIGURACI√ìN Y INICIALIZACI√ìN
// ===================================================

/**
 * Estado de inicializaci√≥n del sistema de datos
 */
let isInitialized = false;

/**
 * Inicializa toda la capa de datos
 * Debe llamarse una vez al inicio de la aplicaci√≥n
 * 
 * @returns {Promise<boolean>} True si la inicializaci√≥n es exitosa
 */
export const initializeDataLayer = async () => {
  try {
    if (isInitialized) {
      console.log('üìä Capa de datos ya inicializada');
      return true;
    }

    console.log('üöÄ Inicializando capa de datos de Ant√°rtica...');
    
    // Mostrar configuraci√≥n del entorno
    const config = getDatabaseConfig();
    console.log(`üîß Entorno: ${process.env.NODE_ENV || 'development'}`);
    console.log(`üóÑÔ∏è Base de datos: ${config.database}`);
    console.log(`üè† Host: ${config.host}:${config.port}`);
    
    // Inicializar conexi√≥n a base de datos
    const dbInitialized = await initializeDatabase();
    if (!dbInitialized) {
      throw new Error('No se pudo inicializar la base de datos');
    }

    // Validar modelos
    console.log('üîç Validando modelos de datos...');
    
    if (!userModel || !productModel || !orderModel) {
      throw new Error('Error al cargar modelos de datos');
    }

    console.log('‚úÖ Modelos cargados correctamente:');
    console.log('   üë§ UserModel - Gesti√≥n de usuarios');
    console.log('   üìö ProductModel - Cat√°logo de libros');
    console.log('   üõí OrderModel - Gesti√≥n de pedidos');

    // TODO: Crear tablas si no existen
    // await createDatabaseTables();
    
    // TODO: Ejecutar migraciones pendientes
    // await runMigrations();
    
    // TODO: Insertar datos iniciales si es necesario
    // await seedInitialData();

    isInitialized = true;
    console.log('üéâ Capa de datos inicializada correctamente');
    
    return true;
    
  } catch (error) {
    console.error('üí• Error cr√≠tico al inicializar capa de datos:', error);
    isInitialized = false;
    return false;
  }
};

/**
 * Cierra la capa de datos
 * Debe llamarse al cerrar la aplicaci√≥n
 * 
 * @returns {Promise<void>}
 */
export const closeDataLayer = async () => {
  try {
    if (!isInitialized) {
      console.log('üìä Capa de datos no estaba inicializada');
      return;
    }

    console.log('üîÑ Cerrando capa de datos...');
    
    // Cerrar conexi√≥n a base de datos
    await closeDatabase();
    
    isInitialized = false;
    console.log('üëã Capa de datos cerrada correctamente');
    
  } catch (error) {
    console.error('‚ùå Error al cerrar capa de datos:', error);
  }
};

/**
 * Verifica si la capa de datos est√° inicializada
 * 
 * @returns {boolean} Estado de inicializaci√≥n
 */
export const isDataLayerInitialized = () => isInitialized;

/**
 * Obtiene informaci√≥n del estado de la base de datos
 * 
 * @returns {Object} Estado de la base de datos
 */
export const getDatabaseStatus = () => {
  return {
    initialized: isInitialized,
    connected: dbManager.isConnectionActive(),
    config: getDatabaseConfig(),
    models: {
      users: !!userModel,
      products: !!productModel,
      orders: !!orderModel
    }
  };
};

// ===================================================
// UTILIDADES DE DESARROLLO
// ===================================================

/**
 * Ejecuta una consulta SQL directa (solo para desarrollo/debugging)
 * ‚ö†Ô∏è NO USAR EN PRODUCCI√ìN
 * 
 * @param {string} query - Consulta SQL
 * @param {Array} params - Par√°metros de la consulta
 * @returns {Promise<Object>} Resultado de la consulta
 */
export const executeRawQuery = async (query, params = []) => {
  try {
    if (process.env.NODE_ENV === 'production') {
      throw new Error('executeRawQuery no est√° disponible en producci√≥n');
    }
    
    console.log('‚ö†Ô∏è Ejecutando consulta SQL directa (solo desarrollo)');
    return await dbManager.executeQuery(query, params);
  } catch (error) {
    console.error('‚ùå Error en consulta SQL directa:', error);
    throw error;
  }
};

/**
 * Resetea la base de datos (solo para testing/desarrollo)
 * ‚ö†Ô∏è ELIMINA TODOS LOS DATOS
 * 
 * @returns {Promise<boolean>} True si el reset es exitoso
 */
export const resetDatabase = async () => {
  try {
    if (process.env.NODE_ENV === 'production') {
      throw new Error('resetDatabase no est√° disponible en producci√≥n');
    }
    
    console.log('‚ö†Ô∏è RESETEO DE BASE DE DATOS - ELIMINANDO TODOS LOS DATOS');
    
    // TODO: Implementar reset de tablas
    // await dbManager.executeQuery('TRUNCATE TABLE detalle_pedidos');
    // await dbManager.executeQuery('TRUNCATE TABLE pedidos');
    // await dbManager.executeQuery('TRUNCATE TABLE productos');
    // await dbManager.executeQuery('TRUNCATE TABLE usuarios');
    // await dbManager.executeQuery('TRUNCATE TABLE sesiones');
    
    console.log('‚úÖ Base de datos reseteada (simulado)');
    return true;
    
  } catch (error) {
    console.error('‚ùå Error al resetear base de datos:', error);
    return false;
  }
};

// ===================================================
// FUNCIONES DE MIGRACI√ìN Y SEEDING
// ===================================================

/**
 * Crea todas las tablas de la base de datos
 * Se ejecuta autom√°ticamente en la inicializaci√≥n
 * 
 * @returns {Promise<void>}
 */
const createDatabaseTables = async () => {
  try {
    console.log('üî® Creando tablas de base de datos...');
    
    // TODO: Implementar creaci√≥n de tablas basada en los esquemas
    // const tables = [USER_SCHEMA, PRODUCT_SCHEMA, ORDER_SCHEMA, ORDER_DETAIL_SCHEMA, SESSION_SCHEMA];
    
    // for (const schema of tables) {
    //   await createTableFromSchema(schema);
    // }
    
    console.log('‚úÖ Tablas creadas correctamente');
  } catch (error) {
    console.error('‚ùå Error al crear tablas:', error);
    throw error;
  }
};

/**
 * Inserta datos iniciales en la base de datos
 * Solo se ejecuta si las tablas est√°n vac√≠as
 * 
 * @returns {Promise<void>}
 */
const seedInitialData = async () => {
  try {
    console.log('üå± Insertando datos iniciales...');
    
    // TODO: Verificar si ya existen datos
    // TODO: Insertar usuarios administradores
    // TODO: Insertar productos de ejemplo
    // TODO: Insertar categor√≠as
    
    console.log('‚úÖ Datos iniciales insertados');
  } catch (error) {
    console.error('‚ùå Error al insertar datos iniciales:', error);
    throw error;
  }
};

// ===================================================
// EXPORTACIONES PRINCIPALES
// ===================================================

// Gesti√≥n de base de datos
export {
  dbManager,
  getDatabase,
  initializeDatabase,
  closeDatabase,
  getDatabaseConfig,
  DB_CONFIG
};

// Modelos de datos
export {
  UserModel,
  userModel,
  getUserModel,
  ProductModel,
  productModel,
  getProductModel,
  OrderModel,
  orderModel,
  getOrderModel
};

// Esquemas
export {
  USER_SCHEMA,
  PRODUCT_SCHEMA,
  ORDER_SCHEMA,
  ORDER_DETAIL_SCHEMA,
  SESSION_SCHEMA
};

// Constantes de pedidos
export {
  ORDER_STATES,
  PAYMENT_METHODS,
  ORDER_CONFIG
};

// ===================================================
// EXPORTACI√ìN POR DEFECTO
// ===================================================

/**
 * Objeto principal con toda la funcionalidad de la capa de datos
 */
export default {
  // Inicializaci√≥n
  initializeDataLayer,
  closeDataLayer,
  isDataLayerInitialized,
  getDatabaseStatus,
  
  // Gesti√≥n de BD
  dbManager,
  getDatabase,
  
  // Modelos
  models: {
    users: userModel,
    products: productModel,
    orders: orderModel
  },
  
  // Utilidades de desarrollo
  executeRawQuery,
  resetDatabase,
  
  // Configuraci√≥n
  config: {
    database: DB_CONFIG,
    orders: ORDER_CONFIG,
    states: ORDER_STATES,
    payments: PAYMENT_METHODS
  }
};
